daml 1.2
module Danban.V2.Upgrade where

import DA.Upgrade

import qualified Danban as DanbanV1
import qualified Danban.Board as BoardV1
import qualified Danban.Role as RoleV1
import qualified Danban.Rules as RulesV1
import qualified Danban.User as UserV1

import DanbanInstances ()
import Danban.BoardInstances ()
import Danban.RoleInstances ()
import Danban.RulesInstances ()
import Danban.UserInstances ()

import qualified Danban.V2 as DanbanV2
import qualified Danban.V2.Board as BoardV2
import qualified Danban.V2.Role as RoleV2
import qualified Danban.V2.Rules as RulesV2
import qualified Danban.V2.User as UserV2

import Danban.V2Instances ()
import Danban.V2.BoardInstances ()
import Danban.V2.RoleInstances ()
import Danban.V2.RulesInstances ()
import Danban.V2.UserInstances ()

instance Convertible DanbanV1.Admin DanbanV2.Admin where
  convert DanbanV1.Admin{..} = DanbanV2.Admin{..}

instance Convertible UserV1.Directory UserV2.Directory where
  convert UserV1.Directory{..} = UserV2.Directory{..}

instance Convertible BoardV1.Directory BoardV2.Admin where
  convert BoardV1.Directory{..} = BoardV2.Directory{..}

template UpgradeInitiator
  with
    operator: Party
  where
    signatory operator

    controller operator can
      InitiateUpgrade
        : ()
        do
          -- Convert admin contracts          
          (adminCid, admin) <- fetchByKey @DanbanV1.Admin operator
          archive adminCid
          newAdminCid <- create (convert admin)
          
          (usersCid, users) <- fetchByKey @UserV1.Directory operator
          archive usersCid
          create (convert users)

          exercise newAdminCid DanbanV2.UnpauseApp

          (boardsCid, boards) <- fetchByKey @BoardV1.Directory operator
          archive boardsCid
          create (convert boards)
          
          return ()

template BoardUpgrader
  with
    operator : Party
    boardId : Text
    sigs : [Party]