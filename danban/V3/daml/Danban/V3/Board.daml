daml 1.2
module Danban.V3.Board where

import DA.List

import qualified Danban.V3.User as User

template Directory
  with
    operator : Party
    party : Party
    boards : [Text]
  where
    signatory operator, party
    observer party

    key (operator, party) : (Party, Party)
    maintainer key._1, key._2

    controller [operator, party] can
      Directory_AddBoard
        : ContractId Directory
        with
          board : Text
        do
          create this with boards = dedupSort (board :: boards)

      Directory_RemoveBoard
        : ContractId Directory
        with
          board : Text
        do
          create this with boards = delete board boards

template Data
  with
    _id : Text
    operator : Party
    admins : [Party]
    obs : [Party]

    title : Text
    color : Text
    isPublic : Bool
    lists : [Text]
  where
    signatory operator, admins
    observer obs

    key (operator, _id) : (Party, Text)
    maintainer key._1

    controller operator can
      nonconsuming Data_UpdatePublic
        : ContractId Data
        do
          if isPublic
            then do
              (_, ud) <- fetchByKey @User.Directory operator
              exercise self Data_UpdateObs with newObs = ud.users
            else return self

    controller operator, admins can
      Data_UpdateObs
        : ContractId Data
        with
          newObs : [Party]
        do
          forA lists (\list -> exerciseByKey @CardList (operator, list) List_UpdateObs with newObs)
          create this with obs = newObs

    controller admins can
      Data_Delete
        : ()
        do
          forA lists (\list -> exerciseByKey @CardList (operator, list) List_Delete)
          return ()

    choice Data_UpdateAdmins
      : ContractId Data
      with
        newAdmins : [Party]
      controller admins ++ newAdmins
      do
        forA lists (\list -> exerciseByKey @CardList (operator, list) List_UpdateAdmins with ..)
        create this with admins = newAdmins

template CardList 
  with
    _id : Text
    operator : Party
    admins : [Party]
    obs : [Party]

    boardId : Text
    title : Text
    cards : [Text]
  where
    signatory operator, admins
    observer obs

    key (operator, _id) : (Party, Text)
    maintainer key._1

    controller operator can
      List_UpdateObs
        : ContractId CardList
        with
          newObs : [Party]
        do
          forA cards (\card -> exerciseByKey @Card (operator, card) Card_UpdateObs with newObs)
          create this with obs = newObs

    controller admins can
      List_Delete
        : ()
        do
          forA cards (\card -> exerciseByKey @Card (operator, card) Card_Delete)
          return ()

    choice List_UpdateAdmins
      : ContractId CardList
      with
        newAdmins : [Party]
      controller admins ++ newAdmins
      do
        forA cards (\card -> exerciseByKey @Card (operator, card) Card_UpdateAdmins with ..)
        create this with admins = newAdmins

type CardKey = (Party, Text, Text, Text)

template Card
  with
    _id : Text
    operator : Party
    admins : [Party]
    obs : [Party]

    boardId : Text
    listId : Text
    color : Optional Text
    text : Text
    date : Optional Time

    assignee : Optional Party
    comments : [Text]
  where
    signatory operator, admins
    observer obs

    key (operator, _id) : (Party, Text)
    maintainer key._1

    controller operator can
      Card_UpdateObs
        : ContractId Card
        with
          newObs : [Party]
        do
          create this with obs = newObs

    controller admins can
      Card_Delete
        : ()
        do
          return ()

    choice Card_UpdateAdmins
      : ContractId Card
      with
        newAdmins : [Party]
      controller admins ++ newAdmins
      do
        create this with admins = newAdmins

template Comment
  with
    _id : Text
    operator : Party
    admins : [Party]
    obs : [Party]
    
    cardId : Text
    body : Text

    createdAt : Time
    author : Party
  where
    signatory operator, admins

    key (operator, _id) : (Party, Text)
    maintainer key._1
