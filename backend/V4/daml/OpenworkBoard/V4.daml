daml 1.2
module OpenworkBoard.V4 where

import qualified OpenworkBoard.V4.App as App
import qualified OpenworkBoard.V4.User as User
import qualified OpenworkBoard.V4.Role as Role
import qualified OpenworkBoard.V4.Board as Board

template Admin
  with
    operator: Party
  where
    signatory operator

    key operator : Party
    maintainer key

    controller operator can
      nonconsuming StartApp
        : ()
        do
          create User.Directory with operator; users = []
          create App.Semaphore with operator; users = []
          return ()

      nonconsuming PauseApp
        : ()
        do exerciseByKey @App.Semaphore operator Archive

      nonconsuming UnpauseApp
        : ContractId App.Semaphore
        do
          (_, ud) <- fetchByKey @User.Directory operator
          create App.Semaphore with operator; users = ud.users

      nonconsuming AddUser
        : ContractId Role.User
        with
          party : Party
        do
          (_, userDir) <- fetchByKey @User.Directory operator
          exerciseByKey @User.Directory operator User.Directory_AddObs with party
          forA userDir.users (\user -> do
              exerciseByKey @Board.Directory (operator, user) Board.Directory_UpdatePublic
            )
          create Role.User with ..

template UserSession
  with
    operator : Party
    user : Party
    displayName : Text
    email : Text
  where
    signatory user
    key user : Party
    maintainer key

    controller operator can
      UserSessionAck: ()
        do
          maybeUser <- lookupByKey @Role.User (operator, user)
          case maybeUser of
            None -> do
              (appCid, _) <- fetchByKey @Admin operator
              exercise appCid PauseApp
              userRole <- exercise appCid AddUser with party = user
              exercise appCid UnpauseApp
              exercise userRole Role.PutProfile with
                imageUrl = ""
                displayName
                email = Some email
                domain = None
              return ()
            Some _ ->
              return ()

testUserSessions = scenario do
  admin <- getParty "Admin"
  alice <- getParty "Alice"
  bob <- getParty "Bob"

  admin `submit` do
    app <- create Admin with operator = admin
    exercise app StartApp
  
  aliceSession <- alice `submit` do
    create UserSession with
      operator = admin
      user = alice
      displayName = "Big Al"
      email = "alice@example.com"
  
  admin `submit` do
    exercise aliceSession UserSessionAck

  aliceSession2 <- alice `submit` do
    create UserSession with
      operator = admin
      user = alice
      displayName = "Big Al"
      email = "alice@example.com"
  
  admin `submit` do
    exercise aliceSession2 UserSessionAck
  
  -- New users should be added to existing public boards
  submit alice do
    exerciseByKey @Role.User (admin, alice) Role.ADD_BOARD with
      boardId = "123"
      title = "Foo"
    
    exerciseByKey @Role.User (admin, alice) Role.TOGGLE_PUBLIC with
      boardId = "123"

  bobSession <- bob `submit` do
    create UserSession with
      operator = admin
      user = bob
      displayName = "Big Bob"
      email = "bob@example.com"
  
  admin `submit` do
    exercise bobSession UserSessionAck
    (_boardCid, boardData) <- fetchByKey @Board.Data (admin, "123")
    assert (elem bob boardData.obs)

testTagsAndComments = scenario do
  admin <- getParty "Admin"
  user <- getParty "User"

  submit admin do
    create Admin with operator = admin
    exerciseByKey @Admin admin StartApp
    exerciseByKey @Admin admin PauseApp
    exerciseByKey @Admin admin AddUser with
      party = user
    exerciseByKey @Admin admin UnpauseApp

  submit user do
    exerciseByKey @Role.User (admin, user) Role.ADD_BOARD with
      boardId = "123"
      title = "Foo"
    
    exerciseByKey @Role.User (admin, user) Role.ADD_LIST with
      boardId = "123"
      listId = "abc"
      title = "List 1"
    
    exerciseByKey @Role.User (admin, user) Role.ADD_CARD with
      listId = "abc"
      cardId = "xyz"
      text = "Lorem ipsum"
    
    exerciseByKey @Role.User (admin, user) Role.ADD_TAG with
      boardId = "123"
      tagId = "456"
      name = "Urgent"
      color = "Red"
  
  -- You shouldn't be able to assign a non-exitant tag
  submitMustFail user do
    exerciseByKey @Role.User (admin, user) Role.ASSIGN_TAG with
      tagId = "badTag"
      cardId = "xyz"
  
  -- You shouldn't be able to assign a tag twice
  submit user do
    exerciseByKey @Role.User (admin, user) Role.ASSIGN_TAG with
      tagId = "456"
      cardId = "xyz"
    
    exerciseByKey @Role.User (admin, user) Role.ASSIGN_TAG with
      tagId = "456"
      cardId = "xyz"

    (_, cardData) <- fetchByKey @Board.Card (admin, "xyz")
    (_, tagData) <- fetchByKey @Board.Tag (admin, "456")
    assert (length cardData.tags == 1)
    assert (length tagData.cards == 1)
  
  -- Users should be able to delete tags
  submit user do
    exerciseByKey @Role.User (admin, user) Role.DELETE_TAG with
      tagId = "456"
    
    (_, cardData) <- fetchByKey @Board.Card (admin, "xyz")
    (_, boardData) <- fetchByKey @Board.Data (admin, "123")
    assert (cardData.tags == [])
    assert (boardData.tags == [])
  
  -- Users should be able to add and delete comments
  submit user do
    exerciseByKey @Role.User (admin, user) Role.ADD_COMMENT with
      cardId = "xyz"
      commentId = "comment-id-1"
      comment = "Nice work!"
    
    fetchByKey @Board.Comment (admin, "comment-id-1")

    exerciseByKey @Role.User (admin, user) Role.DELETE_COMMENT with
      commentId = "comment-id-1"
    
    (_, card) <- fetchByKey @Board.Card (admin, "xyz")
    assert (card.comments == [])
  
  submitMustFail user do
    fetchByKey @Board.Comment (admin, "comment-id-1")
